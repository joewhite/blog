---
title: "ReSharper, day 5: Integrated unit-test runner  #.NET  #resharper"
sort: 2301
---
<p>Welcome to day 5 of my <a href="http://blog.excastle.com/2007/01/31/blog-event-the-31-days-of-resharper/">31 Days of ReSharper</a>, where I introduce you to ReSharper's unit-test runner.</p>

<blockquote><img src="http://blog.excastle.com/images/resharper/UnitTestRunner.png" width="458" height="233" alt="ReSharper unit test runner" border="1"/></blockquote>

<p>(The <a href="http://www.jetbrains.com/unitrun/">ReSharper test runner</a> is also available for <b>free</b> as a separate download, if you don't want to buy the full-fledged ReSharper.)</p>

<p>Now, why would the world need another unit-test runner? There are already so many ways to run tests. There's the <a href="http://www.nunit.org/">NUnit</a> GUI, and the NUnit console runner. You can (and I have) write a <a href="http://blog.excastle.com/2006/09/05/the-coolness-that-is-rake/">rakefile</a> that builds your solution using MSBuild and then runs the NUnit console, set up a Tools menu option to invoke it, and bind a keystroke to it. You can install <a href="http://www.testdriven.net/">TestDriven.NET</a>. (You could even pay a lot of money for Microsoft's test runner, although it <a href="http://blog.excastle.com/2006/01/14/visual-studio-2005-still-wondering-where-the-unit-testing-tools-are/">doesn't actually let you run the tests</a>.) Don't these cover just about every possible option?</p>

<p>Well, yeah. But ReSharper's test runner is shiny. And being an IDE add-in, it manages some nice integration. Let's take a tour.</p>

<h4>Running all the tests</h4>



<p>I've <a href="http://blog.excastle.com/2006/01/14/visual-studio-2005-still-wondering-where-the-unit-testing-tools-are/">ranted</a> about this before, so let's start with the number one most basic feature of a testing tool: running all the tests.</p>

<p>Yes, ReSharper can do it, and it's easy. The best way to run all the tests is to bind a keystroke (we use Ctrl+Shift+T) to the ReSharperAddIn25.UnitTestRunner_RunAllSolution command. Then, any time you hit Ctrl+Shift+T, it will automatically build your solution and run all the tests, showing the green (or red) bar as it goes.</p>

<p>If you don't want it to be that easy, you can also go to the ReSharper menu &gt; Unit Testing &gt; Run All Tests from Solution. There are a couple of other options in the Unit Testing menu, but I ignore them, as they look like they do something other than run all the tests &mdash; and so far, we've done pretty well at keeping our NUnit tests fast.</p>

<h4>Supported test runners</h4>

<p>Out of the box, ReSharper's test runner supports <a href="http://www.nunit.org/">NUnit</a> and <a href="http://www.csunit.org/">csUnit</a> tests. There's also a third-party add-in to <a href="http://blogs.jetbrains.com/dotnet/2007/01/mbunit-support-in-resharper/">add mbUnit support to ReSharper UnitRun</a>.</p>

<h4>Integration</h4>

<p>The ReSharper test-runner add-in really takes full advantage of being right there in Visual Studio.</p>

<ul>
<li><p><b>Dockable.</b> The test-runner window is dockable just like all the other IDE windows, so you can tuck it out of the way. I dock it to the bottom of the IDE, in a tab-set with the Output window and the various Search Result windows. (If you put it in a tab set, and a different tab is visible when you run the tests, the test-runner window will come to the front, just like you'd want it to.)</p></li>
<li><p><b>Key-bindable.</b> As I noted above, it's terribly easy to bind a single keystroke to mean "build everything, then run all the tests, and show me the results with a red or green bar". So easy.</p></li>
<li><p><b>Pays attention.</b> When you make code changes and rebuild, all the icons in the tree turn into little question marks, so you can see that you haven't run the tests yet. But they keep their colors, so you can still see which ones passed and failed last time around. Here are screenshots of the "freshly run" (check marks) and "after rebuild" (question marks):</p>

<p><img src="http://blog.excastle.com/images/resharper/UnitTestRunnerCheckMarks.png" width="170" height="50" alt="ReSharper unit test runner, showing check marks and error icons for each test" border="1" hspace="12" vspace="2"/><img src="http://blog.excastle.com/images/resharper/UnitTestRunnerQuestionMarks.png" width="170" height="50" alt="ReSharper unit test runner, showing question marks after building and before re-running tests" border="1" hspace="12" vspace="2"/></p>

<p>It's even smart enough that, if you build your solution, but you haven't actually modified any code, it won't switch to the question marks. (I love this, because I'm always getting distracted by a conversation or something, and then can't remember whether I just ran the tests or not.)</li>

<li><p><b>Jump to the code.</b> Two nice features here. First, if you double-click on a test in the test tree, the editor shows the code for that test. Secondly, if tests fail, the test results pane puts hyperlinks into the call stack, and clicking one of those hyperlinks will jump to that location in the editor.</p>

<p><img src="http://blog.excastle.com/images/resharper/UnitTestRunnerHyperlinks.png" width="590" height="207" alt="ReSharper unit test runner, showing a test failure message and hyperlinked call stack" border="1" hspace="12"/></p></li>

<li><p><b>Gutter icons to run or debug a test.</b> Wherever ReSharper notices a test method, it will show a little green-and-yellow circle in the gutter next to the code. If you click on that circle, you'll get a dropdown menu with, among other things, an option to run that one test under the debugger. So if you want to put a breakpoint in a test and debug just that test, it's easy.</p>

<p><img src="http://blog.excastle.com/images/resharper/UnitTestGutter.png" width="282" height="152" alt="ReSharper gutter icons for running unit tests" border="1" hspace="12"/></p></li>
</ul>

<p>Nothing in the ReSharper unit test runner is really groundbreaking, although the "jump to the code" features are pretty nice. It's just that the features are all there, and they're done well. If you do unit testing, give their test runner a try.</p>
