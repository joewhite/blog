---
title: "ReSharper, day 20: Fix errors and warnings with Alt+Enter  #.NET  #resharper"
sort: 2401
---
<p>Welcome to day 20 of my <a href="http://blog.excastle.com/2007/01/31/blog-event-the-31-days-of-resharper/">31 Days of ReSharper</a>.</p>

<p>I've been talking about Alt+Enter, and how it can fix a couple of different kinds of errors, but I've only scratched the surface. It can fix all sorts of things &mdash; not everything, but quite a bit. And it's not just errors; it can fix quite a few warnings (<a href="http://blog.excastle.com/2007/02/01/resharper-day-1-the-gray-the-red-and-the-squiggly/">grays</a>) as well.</p>

<p>So today I'll cover a few more examples. These are not meant to be exhaustive.</p>

<h4>A note about "disable this warning"</h4>

<p>When you're over a ReSharper warning in the code (either gray code, or a blue squiggly), and press Alt+Enter, one of the quick fixes will be to disable the warning, e.g., "Disable warning 'Unused private member'". My advice is, avoid this command.</p>

<p>I tried it once, because I thought it meant "put in a comment or a <code>#pragma</code> or something to flag that this <i>particular</i> occurrence is okay". It doesn't. It means "never check for this condition again, ever, anywhere". And there's no Undo for it. You have to dig through ReSharper Options until you find the right setting to turn it back on.</p>

<p>Fortunately, you can disable this command entirely (on the same page where you go to clean up after you selected it unintentionally). Go to ReSharper Options &gt; Highlighting, and uncheck "Show 'Disable warning ...' action".</p>

<h4>Fixing error: Return type doesn't match</h4>

<p>Suppose you're upgrading code from VS 2003 to VS 2005, and are starting to use generics. So you refactor a utility method to return <code>IList&lt;Foo&gt</code>; instead of <code>IList</code>. But now all the places that called it are broken.</p>

<blockquote><img src="http://blog.excastle.com/images/resharper/QuickFixes01.png" width="276" height="100" alt="ReSharper's Quick Fixes for an unmatched return type" border="1"/></blockquote>

<p>Here's one of the call sites that's assigning the method result into an <code>IList</code>. In this example, you would want to select <b>Change type of 'errors' to 'IList&lt;Exception&gt;'</b>. And you can do the same thing at each other call site. Beats re-typing the same return type over and over.</p>

<h4>Fixing error: Abstract method in concrete class</h4>

<p>If you're in the middle of introducing a template method, you might end up with abstract methods in a class, but you haven't marked the class itself as <code>abstract</code> yet.</p>

<blockquote><img src="http://blog.excastle.com/images/resharper/QuickFixes02.png" width="276" height="77" alt="ReSharper's Quick Fixes for an abstract method in a non-abstract class" border="1"/></blockquote>

<p>In this example, you just cursor to the <code>abstract</code> keyword, press Alt+Enter, and select <b>Make '<i>ClassName</i>' abstract</b>. Sure, it's not that much typing to just scroll to the class declaration and type <code>abstract</code> there; but the nice thing about this one is that the squiggly shows up right there in the code you're working with, so you don't need to scroll to the top of the file.</p>

<h4>Fixing warning: Variable is assigned but never read</h4>

<p>ReSharper can fix variables that are declared but never used, but that's not very interesting. Variables that are one-way &mdash; read but never written, or vice versa &mdash; are a little more interesting. So here's a variable that's assigned in its declaration, but then never gets read:</p>

<blockquote><img src="http://blog.excastle.com/images/resharper/QuickFixes03.png" width="402" height="53" alt="ReSharper's Quick Fixes for a variable that is written, but never read" border="1"/></blockquote>

<p>When it says "assignment(s)", it means it. It will remove any assignment that happens at the declaration, and it will remove <i>any other assignments</i> that happen anywhere else. This is particularly striking when you have a <i>field</i> that's never read; ReSharper will remove every assignment in every method. This can be very handy when you're ripping out code you don't need anymore.</p>

<p><b>Be careful with this one.</b> If any of the assignments have side effects, you will lose those side effects. In the above example, the value would never get added to the list box.</p>

<h4>Fixing warning: Field is read but never written</h4>

<blockquote><img src="http://blog.excastle.com/images/resharper/QuickFixes04.png" width="192" height="54" alt="ReSharper's Quick Fix for a field that is read, but never assigned" border="1"/></blockquote>

<p>This one is cool. You just select <b>Initialize field in constructor(s)</b>, and then you're done. ReSharper automatically adds a new parameter to your constructor and generates the code to assign it.</p>

<p>Oddly, there isn't a quick-fix to create a read/write property. I'm sure I've seen that as a quick-fix, but apparently not here.</p>

<h4><a name="unusedparameter">Fixing warning: Unused parameter</a></h4>

<blockquote><img src="http://blog.excastle.com/images/resharper/QuickFixes05.png" width="353" height="54" alt="ReSharper's Quick Fix for an unused parameter" border="1"/></blockquote>

<p>Yep. When you use ReSharper to remove an unused parameter, it automatically fixes all the call sites to keep the code compilable.</p>

<p>Often, this yields more gray code, especially when you had one object that you were plumbing through seven layers of code, and then you refactor so you don't need it anymore. Remove it at the bottom layer, and now the next layer up has a gray parameter.</p>

<p>You might not see this very often, though, because ReSharper only seems to mark a parameter as gray if you're in a private method. This is silly, of course; you would care about unused parameters in public methods at least as much as in private methods.</p>

<h4>F12 and Alt+Enter</h4>

<p>That's just a taste of what Alt+Enter can do to fix errors and warnings. When you see stripes in the <a href="http://blog.excastle.com/2007/02/02/resharper-day-2-the-color-bar-and-the-green-box/">color bar</a>, it can be worth it to just keep hitting F12 (jump to next error) and Alt+Enter, and seeing what ReSharper can do to help clean up your code.</p>
