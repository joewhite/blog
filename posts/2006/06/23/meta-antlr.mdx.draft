---
title: "Meta-ANTLR  #.NET  #Delphi  #antlr  #dgrok  #ruby"
sort: 2329
---
<p>My first go-round, I got frustrated with the amount of duplicate code I had to write in my ANTLR grammar just to build real parse trees. ANTLR is great if you want to parse and evaluate an expression, but it kind of sucks if you want to parse and understand source code.</p>
<p>So I wrote a meta-parser and had another go of it. I've now got a Ruby script that reads in my metagrammar, does some chugging, and spits out an ANTLR .g syntax file, as well as some autogenerated .cs files. (All automated as part of every build, of course.)</p>
<p>Here's the cool stuff my metaparser can do.</p>
<ul>
<li>Node classes. Just about every parser rule now has a corresponding class, which is automatically codegenned by the metagrammar script. That class has properties for each of the syntax elements, so for example, when the Parameter class is automatically generated, it is given these properties:
<ul>
<li><font face="Courier New">public TokenNode Semicolon { get ... }</font>
<li><font face="Courier New">public TokenNode Style { get ... } // var, const, out, or nothing</font>
<li><font face="Courier New">public List&lt;IdentItem&gt; Names { get ... }</font>
<li><font face="Courier New">public TokenNode Colon { get ... }</font>
<li><font face="Courier New">public INode Type { get ... }</font>
<li><font face="Courier New">public TokenNode Equal { get ... }</font>
<li><font face="Courier New">public INode Default { get ... }</font></li></ul>
<li>Readability. In the metagrammar file, token names are in angle brackets, such as <font face="Courier New">&lt;Ident&gt;</font>. Parser names, like <font face="Courier New">MethodCall</font>, aren't in brackets. Everything is Pascal-cased. I find this far easier to read than the capitalization-based <font face="Courier New">TOKEN</font> and <font face="Courier New">parserule</font> convention used by ANTLR.
<li>ANTLR bug workaround. Since ANTLR sometimes <a href="http://blog.excastle.com/2006/05/10/what-to-do-when-antlr-breaks-your-inner-rules/">forgets that <font face="Courier New">EOF</font> is a valid end-of-rule token</a>, my metagrammar script automatically generates the appropriate workaround for every rule in the metagrammar. Suddenly I can write unit tests for everything again, without even having to think about it! Hooray!
<li>Remove duplication. To get keywords and semikeywords to work, I had to list them all twice: once in the <font face="Courier New">tokens{}</font> section, and again in the keyword and semikeyword parser rules. (Predictably, when I went to remove the duplication, I found that I had made some mistakes: the two lists weren't exactly the same.) The metagrammar just lists them once, and it automatically generates the necessary duplication to make ANTLR do the right thing.</li></ul>
<p>Honestly, though, I think that the class-for-each-node-type thing is going to be the coolest. Especially when I want to start hanging some hand-coded properties (like a <font face="Courier New">List&lt;string&gt;</font> of all the used units, so I don't always have to walk the Ident nodes) off of some node types. (Partial classes are going to be so sweet for this.)</p>
<p>The only downside is that I more or less had to start over. I've still got parsing for over half the rules, but I threw away my old tree construction and started over, so I'm only <em>finished</em> with 42% of all the rules. But the parse trees are going to be way cooler now that I'm doing them myself and not worrying about ANTLR's AST.</p>
<p>(And no, I still can't release the code. Working on that.)</p>
