---
title: "Agile 2006: Is Agile Development Still Agile?  #Programming  #agile2006  #extreme programming"
sort: 2343
---
<p>Okay, so I'm a day behind. My excuse is that my room's Net access was broken again last night, but that's pretty flimsy, since I didn't call support to fix it again, or go down to the lobby for wireless.</p>
<p>But yeah. Yesterday afternoon, Brian and I went to the "Is Agile Development Still Agile?" discovery session (well, part of it &#8212; we missed the first half hour). They had divided everyone into 20 tables of about 5 or 6 people each, and then each table brainstormed and prioritized answers to four questions:</p>
<ul>
<li>The 3 things that first attracted me to Agile development were...</li>
<li>The 3 things I like most about doing Agile development are...</li>
<li>My 3 biggest disappointments about Agile development are...</li>
<li>3 things that surprised me about Agile development are...</li></ul>
<p>Each table wrote their top 3 answers on index-card-sized sticky notes, and then we stuck them up on the wall, clustered more-or-less by topic. They're going to put pictures on the <a href="http://agile2006.stikipad.com/public/show/HomePage">Agile 2006 conference wiki</a>, though at this point they haven't yet.</p>
<p>Since everyone's answers will end up on the wiki, I'm not going to talk about all the answers we came up with, just the ones that interested me the most:</p>
<p>Interesting "first attracted me to" answer: Humanism. It's not just about results, it's about the people too. (This one came from Michael Bolton, who is also presenting at the conference. We'll have to make sure we swing by some of his sessions.)</p>
<p>Interesting "things I like" answers:</p>
<ul>
<li>Stopping mechanism: at the end of an iteration, if you're not done, you stop anyway.</li>
<li>Fail fast.</li>
<li>Visible progress on working software.</li></ul>
<p>Interesting "disappointment" answer: having agile sold to management as a "silver bullet" that will solve everything.</p>
<p>My favorite, though, was an answer to "things that surprised me":&nbsp;<strong>Practices are easy, principles are hard.</strong> It's easy to do things like planning and pair-programming and test-driven development. But to have the deeper understanding of why you do them, what goes into them, is hard. (This one also came from Michael Bolton. He's an interesting character, and I'll look forward to hearing from him again.)</p>
