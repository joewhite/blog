---
title: "Visual Studio 2005: Still wondering where the unit-testing tools are  #.NET  #extreme programming"
sort: 2258
---
<p>We did manage to trade in our <a href="http://blog.excastle.com/2006/01/08/visual-studio-2005-dude-where-are-the-unit-testing-tools/">Visual Studio Architect</a> licenses, and get Developer instead. So I sat down to play with the unit-testing tools.</p>
<p>Verdict? The unit-testing support in Visual Studio 2005 is a toy. Nothing more.</p>
<p>Why do I say that? Because they let you write unit tests, but they <em>don't let you run them.</em></p>



<p><s>The unit-testing support is all part of Visual Studio, not of the .NET Framework itself. So that means you can only run your tests inside the Visual Studio IDE. Meaning, you can't run your tests from the command line. Or as part of an automated build; there's no way to tie the tests into MSBuild or Ant or NAnt or anything else. If you want to know that your latest official build actually passes all the tests, you have to open up Visual Studio so you can run the tests manually.</s></p>
<blockquote><b>Correction:</b> Apparently there's a command-line tool called MSTask that lets you run the tests, so apparently you can run the tests from an automated build. Doesn't help with running the tests as you develop in the IDE, though.</blockquote>
<p>And you have to <em>select</em> the tests manually. There is no way to tell the IDE, "Run all the tests." Oh, you can select a test from a list, and then click a toolbar button to run it. You can even Shift+click and Ctrl+click to select multiple tests, and then click the toolbar button to run them. But if you want to run <em>all</em> the tests, you have to manually select them all in the list. When you write a new test, you have to manually select <em>it,</em> too. And it doesn't remember your selections the next time you start Visual Studio.</p>
<p>Don't we use computers because they let us <em>automate</em> things? Just wondering.</p>
<p>You could, alternatively, hit Ctrl+Shift+X, which runs all the tests in the current assembly. But that only works if the code editor is currently on a test file. Meaning, you can write your test, and hit Ctrl+Shift+X to <a href="http://blog.excastle.com/2005/06/27/xp-fail-first/">watch it fail</a>; but then when you go edit your production code to make the test pass, and hit Ctrl+Shift+X again, it does nothing. Why, after all, would you want to run a test you're not editing?</p>
<p>Why, indeed. Good God, what the hell is <em>wrong</em> with these people?</p>
<p>The most fundamental operation for unit tests is <em>running all the tests.</em> That's the <em>point.</em> Yes, it can be useful to run a subset of the tests, but that's a feature you add later. The first thing you write in any testing framework is "Run All Tests". Because it's something you do dozens of times a day. You do it <em>all the time,</em> because every time you change your code, you want to know you didn't just break something. If you're only running a single test after each change, and you get to the end of the day and find out you broke some other test, you have no idea <em>when</em> you broke it. Which is why you <em>don't</em> run a single test. You run <em>all</em> the tests, unless you have a <em>really</em> good reason not to.</p>
<p>They just don't get it. They give you tools for writing everything <em>but</em> unit tests. They give you tools for writing database tests, and ASP.NET server tests. And sure, you don't want to run those dozens of times a day, because they're slow, and you'd never get anything done. But unit tests are fast. Any unit test worthy of the name is only going to test your code &#8212; not the database, not the server, ideally not even the filesystem. A unit test takes maybe a few microseconds to run. You can run thousands of them at a time, dozens of times a day. It can be a lot of work finding a way to test your code without using the database, but it's usually worth it, because it gives you the chance to run the test All. The. Time.</p>
<p>Unless, of course, you're using Microsoft tools.</p>
<p>It's ridiculous. Team System comes with this fancy new version-control system, when you can get a fabulous tool like <a href="http://subversion.tigris.org/">Subversion</a> for free. It comes with something Microsoft Marketing claims is a unit-testing tool, but it turns out we're better off sticking with <a href="http://www.csunit.org/index.php">csUnit</a>.</p>
<p>Team System is just looking more and more like a complete waste. Score another point for open source.</p>
