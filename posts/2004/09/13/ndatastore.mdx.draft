---
title: "NDataStore  #Delphi  #borcon2004"
sort: 2030
---
I had a lot of questions, and they answered most of them right away:
<ul>
	<li>Transactions? Yes, full transaction support including rollback and disaster recovery</li>
	<li>Client/server? Yes (but also supports local in-process)</li>
	<li>SQL? Yes (SQL-92)</li>
</ul>
Here's the rest of my notes:
<ul>
	<li>Short answer: Yes, this is a real database.</li>
	<li>ADO.NET and BDP drivers</li>
	<li>SQL-92 entry-level compliance</li>
	<li>When running locally, can run in-process (remote is TCP/IP)</li>
	<li>Transaction support
<ul>
	<li>Log-based, crash recovery, rollback</li>
	<li>Row-level locking (plus table locking if you want it)</li>
	<li>Support for read-only transactions</li>
	<li>High-availability support (automatic and manual failover, incremental backup)</li>
	<li>Disaster recovery</li>
</ul>
</li>
	<li>Stored procs, user-defined functions, triggers are coded in .NET
<ul>
	<li>Direct access to transactional context (you're running in-process on the server)</li>
</ul>
</li>
	<li>Managed code protects the database kernel</li>
	<li>Single DB kernel for multiple editions
<ul>
	<li>A lot of vendors prefer to have a "server kernel" and a "micro-kernel" that aren't quite compatible in one way or another</li>
	<li>NDataStore doesn't; local, server, and high-reliability server all have the same disk structure, identical protocol, same transactiton management, same SQL, etc.</li>
</ul>
</li>
	<li>All this in a single, 1.1 MB DLL
<ul>
	<li>That's for ADO.NET. If you want BDP, there are additional DLLs.</li>
</ul>
</li>
	<li>If you want to do client/server, there's a client assembly available that's even smaller.</li>
	<li>Performance: Managed code doesn't make it slower.
<ul>
	<li>64-bit support</li>
</ul>
</li>
	<li>Licensing: Same as JDataStore ($60/seat for desktop version; $500/server for normal server; $1000/server for high-reliability server)</li>
	<li>Faster than mySQL in most benchmarks
<ul>
	<li>Note that mySQL does not support disaster recovery (doesn't force writes to flush to disk immediately, so a commit isn't really a commit), and NDataStore is still faster in several benchmarks</li>
	<li>Obviously, these are vendor benchmarks, so salt grains are required</li>
</ul>
</li>
	<li>Single-file data store</li>
	<li>Zero-admin database: keeps transaction logs only as long as needed (no need to truncate or anything messy like that)</li>
	<li>Next steps:
<ul>
	<li>Apply for NDataStore field test (drop off a business card, or e-mail ggoldfield at borland dot com)</li>
	<li>Will need to sign an NDA, so you may not see me blogging about it :-(</li>
</ul>
</li>
	<li>Interesting note: They actually maintain a single Java codebase, and run a tool to translate into C# with every build!
<ul>
	<li>95% of code is shared</li>
	<li>Other 5% is .NET platform support (like ADO.NET), and written in C#</li>
</ul>
</li>
	<li>No Delphi/Win32 client yet, but they've broken ground on this and are evaluating it</li>
</ul>
Sigh. If only they'd had this on the market a month ago. The folks back home (especially John and Jeff) will know what I mean.
