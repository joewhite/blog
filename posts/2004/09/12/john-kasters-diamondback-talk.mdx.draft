---
title: "John Kaster's Diamondback talk  #Delphi  #borcon2004"
sort: 2027
---
<p>Covering <a href="http://blogs.borland.com/johnk">John Kaster</a>'s preconference tutorial on what's new in Diamondback (that which we dare not call Delphi 9).</p>
<p>This talk was yesterday afternoon, but there wasn't enough convergence of wall power and working wireless to post it until now. So, here goes.</p>
<p>Before he even started the session, I caught a glimpse of Diamondback running on his machine. The first thing I noticed was that there are three tabs at the bottom of the editor window: "Code", "Design", and "History". Very intriguing.</p>
<p>His handouts were hefty. 65 sheets, 128 printed sides front and back. The first 19 pages (not counting the cover page) were just an <em>outline.</em></p>



<p>He did not go into detail on all of this material. He had to rush a fair bit to cover what he did. (Pity, 'cause there was some really good stuff. I wish they'd split the not-really-Delphi stuff, like ASP.NET and ECO, into a separate presentation to give him more time.)</p>
<p>Once again, I had two and a half pages of notes before the break. Once again, I only added another half page after the break (when he was covering ASP.NET and ECO). Good stuff, though.</p>
<p>Still no official word on timelines, not even "you'll hear about it at the opening session", so I assume that (a) it's still a ways off and (b) management has sent out a decree that Thou Shalt Not Discuss The Release. It's too bad. If they were selling Diamondback today, there's no question in my mind that we would upgrade everyone in a heartbeat.</p>
<ul>
<li>Officially confirmed: Diamondback will support Delphi for Win32, Delphi for .NET, and C#, all within the same IDE.
<ul>
<li>You'll even be able to put Delphi and C# projects into the same project group. I know that Sam, Brian, and I will all <em>very</em> much appreciate this!</li></ul>
<li>He showed videos from folks who couldn't make it but had demoed their features ahead of time. These videos will hit BDN around the time Diamondback ships.
<li>IDE look & feel improvements: Object Inspector, tool palette
<li>Delphi Direct goes away. Instead, the BDN news feed appears on Welcome page.
<ul>
<li>You'll be able to add your own feeds
<li>Even John K turned Delphi Direct off!</li></ul>
<li>Sweet! The Locals view will allow you to change which stack frame you're inspecting!
<li>The "An exception has occurred" debugger dialog will have a "Don't show this exception class again" checkbox
<li>"Log call stack" breakpoint action
<li>Color-coded event log
<li>Built-in IDE QualityCentral reporting
<li>The CPU view will show the source, the IL, and the x86 code! (Holy cow, that'll be cool. Visual Studio can show the source and the x86, but can't show the IL!)
<li>Side note: VCL for Win32 does not do Unicode, and there are no plans to add it.
<ul>
<li>For people who need Unicode VCL in Win32, he suggested the free <a href="http://tnt.ccci.org/delphi_unicode_controls/">TNT controls</a>, and said they have the Danny Thorpe Seal of Approval.</li></ul>
<li>Wavy red underlines for compiler errors; hints showing the error message
<li>Refactoring (whoo!)
<ul>
<li>Rename
<li>Extract Method
<ul>
<li>Knows when to, and when not to, use var parameters
<li>Don't know whether it can do out parameters or function returns</li></ul>
<li>Extract Resource String
<ul>
<li>Picks a default name for the resource string
<li>If that name already exists, reuses the existing resourcestring</li></ul>
<li>Sync Edit (select a block, hit a button, and it underlines all the duplicated words; click on one and start typing, and it syncs with all the others within the block)
<li>Find unit or namespace
<li>Declare Field
<li>Declare Variable
<ul>
<li>Right-click on an identifier, select "Declare Variable"
<li>Smart &#8212; guesses a reasonable data type</li></ul>
<li>Shows a preview of what's going to be changed, and doesn't apply until you say go
<li>All of these work in Delphi for Win32 and Delphi for .NET
<li>All except Extract Resource String work for C#
<li>Unsurfaced Refactoring API, so there will probably be more refactorings in later versions</li></ul>
<li>Find References, Find Local References
<ul>
<li>Not by name. If there are two different TFoo classes in two different units, this will find only references to the one you selelcted. (Based on the same metadata as refactoring)
<li>Doesn't go through the compiler, so it's very fast</li></ul>
<li>Tool palette improvements
<ul>
<li>Not just components anymore
<li>File New stuff is now in the tool palette
<li>Incremental search: start typing, filters the list
<li>Can drag categories and items around to reorder them, to optimize the incremental search for what you use most
<li>Ctrl+Alt+P focuses the Tool Palette, so you often don't even need the mouse</li></ul>
<li>Compiler can export XML doc comments
<li>Hover over a symbol: shows XML doc comment in a hint menu, with a stylesheet (HTML formatted, hyperlinks). Unlike Visual Studio, this only works if you have the compiler export the XML doc file.
<li>Demand loading of Win32 design-time packages (Allen blogged about the <a href="http://blogs.borland.com/abauer/archive/2004/08/24/1165.aspx">consequences of this decision</a>, but didn't say what the reason was)
<li>History view
<ul>
<li>Every time you save, it rolls a new backup file
<li>You can specify how many levels of backup to keep
<li>Diff between versions
<li>There will be some level of integration with StarTeam here (but not in the build he was running)</li></ul>
<li>D8 Enterprise already ships with a StarTeam Standard license
<li>Diamondback will have solid StarTeam integration
<ul>
<li>Browse & open directly from repository
<li>File renames are tracked on server</li></ul>
<li>New Open Tools APIs, including a syntax-highlighting API
<li>Function inlining
<ul>
<li>Several caveats
<li>"[C]ompiling the other unit at the same time as compiling the call site (build all) is a different situation than inlining a function that was loaded from a precompiled .dcu" (though it's not clear what that means)
<li>The compiler can refuse to inline a function
<li>Looks like this is mainly for the functions in Windows.pas. It's not clear how useful it will be for user code.</li></ul>
<li>Forward declared record types (maybe .NET only; need to ask Danny)
<li><a name="namespaces">Multi-unit namespaces</a>
<ul>
<li>Last segment of unit name is just disambiguation for the compiler, not for .NET namespaces
<li>File A.B.C.pas used to go into namespace A.B.C, but will now go to namespace A.B
<li>New convention for globals: global Foo in A.B.C.pas is now A.B.Units.C.Foo
<li>He didn't go into much detail, but I'm guessing that if your package has a default namespace of Foo.Bar, and your filenames are A.pas, B.pas, and C.pas (not multipart names), then everything will probably export directly into the Foo.Bar namespace.</li></ul>
<li>for..in: (see also: <a href="http://homepages.borland.com/dthorpe/blog/delphi/2004_08_01_archive.php#109211211041479238">Danny's blog post</a>)
<ul>
<li>You will still have to declare the loop variable in your 'var' section.
<li>Many BCL classes will support for..in (TList, TStrings, TFields, etc.)</li></ul>
<li>Not in Diamondback/Win32 (but maybe in future Win32 compilers):
<ul>
<li>Nested types
<li>Records with methods
<li>Operator overloading
<li>Custom attributes
<li>Generics
<li>Multicast events</li></ul>
<li>Still no way to put VCL controls on WinForms
<li>Come to Meet the Team, Monday night. Each dev will show off their favorite features.</li></ul>
