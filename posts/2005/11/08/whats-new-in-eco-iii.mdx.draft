---
title: "What's New in ECO III  #.NET  #Delphi  #borcon2005"
sort: 2226
---
<p>What's New in ECO III (<a href="http://blogs.borland.com/MalcolmGroves/">Malcolm Groves</a>)</p>
<p><?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p>&nbsp;</p>
<p>A Brief History of ECO (since they cleverly scheduled the What's New session for today, and the Introduction session for tomorrow)</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Borland bought BoldSoft, ported Bold to .NET, and renamed it ECO.</li>
<li>When you move up from C++ to <?xml:namespace prefix = st1 ns = "urn:schemas-microsoft-com:office:smarttags" /><st1:place>Delphi</st1:place>, there's a lot of code you don't have to worry about anymore &#8211; you don't have to write message handlers anymore, etc. ECO does the same thing: raise the level of abstraction, free you up from writing plumbing code.</li>
<li>Modeling tool at design time (the Together part). ECO is a runtime framework that executes that model at runtime. Because you have that modeling info at runtime, it can provide a bunch of services for you.</li>
<li>The actual introduction session will be tomorrow.</li>
<li>ECO is a model powered framework. .NET only. First showed up in C#Builder. ECO 1.1 in <st1:place>Delphi</st1:place> 8. Delphi 2005 added ECO II with lots of new stuff: people said "I can use this for real".</li>
<li>ECO III is available in all editions: Professional, <st1:City><st1:place>Enterprise</st1:place></st1:City>, and Architect. (Used to just be in Architect) Feedback from people saying this makes them dramatically more productive. Not all features are in all editions (will have list at the end of the session).</li></ul>
<p>What's New?</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Option to create one file/unit per class (used to be one file per UML package)</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>This option is turned off by default</li>
<li>Can define the naming convention for the file</li>
<li>Potentially much nicer for team development</li>
<li>Applies to both <st1:place>Delphi</st1:place> and C#</li></ul>
<li>ECO Package in a Package wizard (i.e., put the ECO classes in a separate assembly)</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>No ECO space, no UI</li>
<li>Create a new ECO application, add a reference to your package, edit the ECO space, add the package</li>
<li>Can have a Customer object in the package, and use it or descend from it in the EXE</li></ul>
<li>Improved OCL Editor</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Harder to confuse the parser</li>
<li>Editor available in Modeling surface</li>
<li>Categorized right-hand stuff</li></ul>
<li>Domain Pattern support</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Right-click on surface, Create by Pattern</li>
<li>Create Custom Patterns &#8211; select a set of classes, right-click, Save As Pattern; give it a name, description, etc.</li></ul>
<li>Design surface is cleaner &#8211; doesn't display names where there are no names, etc.</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Auto-names associations &#8211; adds plurals when you make it one-to-many</li></ul>
<li>Type names configuration</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Allow user specification of type, models language independent</li>
<li>Example: if you declare an attribute as type "Integer", it won't compile in C#</li>
<li>Fun: if you often mistype "Integer" as "Intgeer", you can tell ECO that's an alternate name for the same type, and it'll change it back to the canonical name</li>
<ul style="MARGIN-TOP: 0in" type=square>
<li>Also fun: You can do the same thing in the Code Editor with LiveTemplates</li></ul></ul>
<li>Overloaded OCL Operations</li>
<li>ECO Action Language</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Derivative of OCL to allow side-effects (adds ":="; can call methods)</li>
<li>Implement more business logic in your model, instead of in <st1:place>Delphi</st1:place> or C# code</li>
<li>Suggest using OCL when the logic is easy, and use Delphi/C# code if it's complicated or you might want a debugger</li>
<li>Can call other methods (including methods implemented in Delphi/C#)</li></ul>
<li>Extenders Extended</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Supports menu items (TMainMenu, etc.)</li>
<li>EnableOCL and VisibleOCL &#8211; evaluated, must return Boolean. Think TAction.OnUpdate, but not centralized like actions &#8211; defined on each button/etc.</li>
<li>Execute Action Language</li>
<li>Invoke Debugger</li></ul>
<li>Multiple DB support</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Persist some classes via one PersistenceMapper and others via another PersistenceMapper</li>
<li>Combine this with Package In Package, and you can start building domain components</li></ul>
<li>Enhanced DB reverse engineering</li>
<li>State Machine execution</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>State Diagram with Effects, Triggers, Guards, etc.</li>
<li>Define even more of your business logic graphically, and the framework executes it.</li>
<li>Define states (e.g., Requested, Canceled, Approved, Denied, Completed), then define triggers on each transition (Approve, Deny, Cancel, Complete). It knows which triggers are available based on the current state.</li>
<li>Effects are code that's fired on a state change.</li>
<li>Guards say, "Don't take this transition unless this expression evaluates to True." Detects which triggers will violate guards, and will automatically disable those triggers.</li>
<li>States can also have entry actions and exit actions.</li></ul>
<li>ASP.NET AutoForms</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Go from model to execution in one step in ASP.NET (functionality already exists for GUI; this adds it for Web)</li>
<li>Add New &gt; Other &gt; ASP.NET AutoForm</li>
<li>Helps you start testing the model, see what it means. Shortens the feedback loop.</li></ul>
<li>ECO in every version of <st1:place>Delphi</st1:place></li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Professional: Class modeling, WinForms only (not ASP.NET), O/R mapping, OCL, XML persistence</li>
<li><st1:City><st1:place>Enterprise</st1:place></st1:City>: WinForms, WebServices, WebForms, Database persistence (1 database, 1 ECO server)</li>
<li>Architect: State diagramming/execution, multi database, multi-ECO servers</li></ul></ul>
<p>Too bad. That state stuff was looking fairly interesting, but I think buying a dozen copies of Architect is probably a bit out of our reach right now. And the Professional version can't even do databases. Sigh.</p>
