---
title: "Agile and Extreme Programming: A Pragmatic Approach (part 3)  #.NET  #Delphi  #borcon2005  #extreme programming"
sort: 2216
---
<p>Wow, this is going on for a while. Looks like this is part 3 of 4. There's some Q&amp;A stuff, and then a lot of bits about how you can replace some of the scary bits of XP so management doesn't duck and run.</p>
<p>Miscellaneous stuff coming out of Q&amp;A at the end of the break:</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>How do you account for time taken by documentation?</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Business analysts are usually an iteration ahead of the developers</li>
<li>Formal documentation (Help files, etc.) is usually an iteration behind the developers</li>
<li>When you're ready to ship to the outside world, documentation usually catches up during the final testing phase</li></ul>
<li>Who writes the stories?</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Typically, the business analyst creates the stories and the release plan, and then gets it approved by the actual end-user.</li>
<li>Then technical stories get inserted (and may have dependencies). Keep these to a minimum, but they're always there.</li>
<li>Don't necessarily break everything down into sub-tasks.</li></ul>
<li>How do you get started with the first iteration?</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Iteration 0</li>
<li>Iteration 0 is where you create spikes, and establish architectural guidelines for things you know will be difficult to change.</li>
<li>Also find hardware, set up version control, CruiseControl, etc.</li>
<li>Ideally you want to be able to sit down and start coding at the beginning of Iteration 1.</li>
<li>If necessary, add an Iteration -1.</li></ul>
<li>"If you are FedEx-ing hardware around, you have a serious build problem."</li></ul>
<p>Project Velocity</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Measure of how fast work is getting done on your project</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Count how many user stories (or programming tasks) were completed during the iteration</li>
<li>Total up the estimates that these stories received</li></ul>
<li>Helps future estimation during the next Iteration Planning Meeting</li>
<li>During the Iteration Planning Meeting, devs sign up for last week's velocity worth of stories</li>
<li>Don't divide the velocity by # of developers &#8211; not a useful individual metric</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Doesn't help determine overall velocity</li>
<li>Can't compare it to other projects</li>
<li>Discourage team building</li>
<li>If A is behind and B is ahead, B should step forward and say "I'll help so we can finish everything on time"</li>
<li>Re-estimate if needed</li></ul>
<li>OK to use other metrics as long as they're reasonable, accurate, team-based, provide real value, and are simple enough to understand.</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Cyclomatic complexity &#8211; number of decisions/loops per method</li>
<li>Together (for Java or .NET) will run audits and metrics for you</li>
<li>See Brian Sletten's "Applied Object-Oriented Metrics" or David Bock's "Software Metrics and the Great Pyramids of <?xml:namespace prefix = st1 ns = "urn:schemas-microsoft-com:office:smarttags" /><st1:City><st1:place>Giza</st1:place></st1:City>"</li></ul>
<li>Metrics are actually really simple. Estimated vs. actual.</li>
<li>In general, don't try to measure this with Microsoft Project</li></ul>
<p>Iterations give you defense against manager's "This new feature's gotta go in right now!"</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>"Sure, we'll be happy to do that. Which of these accepted features do we take out of the iteration?"</li>
<li>They get to prioritize it.</li></ul>
<p>Iterative Development</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Divide everything into iterations</li>
<li>Schedule tasks in the Iteration Planning Meeting</li>
<li>It is against the rules to look ahead and try to implement anything not scheduled in this iteration (YAGNI &#8211; You Ain't Gonna Need It)</li>
<li>There's always time later to respond to changing requirements. Don't try to do it now.</li>
<li>Hard to substitute</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Tight iterations provide valuable feedback</li>
<li>Keep team focused</li></ul>
<li>Avoid "Big Bang" deployments</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Even if you must deploy that way, do internal "Little Bang" deployments</li>
<li>Deploy often to User Acceptance Testing</li></ul>
<li>Tell the boss: "Find bugs faster!"</li></ul>
<p>Iteration Planning</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Meeting at the beginning of each iteration</li>
<li>User stories chosen by the customer (from the release plan, most important first)</li>
<li>Failed acceptance test</li>
<li>Translated onto index cards (before iteration planning, stories might be in Excel, or whatever is useful to the customer)</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Each task should be 1-3 ideal programming days (apply a multiplier to get "real world" days)</li>
<li>Developers sign up for tasks, then estimate how long each will take</li></ul>
<li>Velocity lets you tell if the iteration is overbooked</li>
<li>Don't be tempted to change your task and story estimates</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Planning relies on cold reality of consistent estimates</li>
<li>Fudging them to be lower means you're lying to yourself &#8211; you're telling management "we don't trust our estimates", and management is telling you "we don't trust your estimates, either"</li></ul>
<li>Estimates does include the time it will take to write the unit tests, but shouldn't assume time for bug-fixes</li>
<li>It's normal to re-estimate stories and release plan every 3-5 iterations</li>
<li>Always do the most important stories (per the customer) first</li>
<li>If you've got Big New Stuff That Everyone Needs To Learn, try to include that in the estimates, or add a spike as a technical card (can't really do it as a spike, since everyone needs to learn it)</li>
<li>Substitutions: Any kind of similar planning is OK, but keep it iterative</li>
<li>Long-term estimates must be fluid</li>
<li>Developers must create their own estimates. Gives dev buy-in, and estimates get better over time.</li>
<li>Tell management: "We're getting developers more interested in the project management side, and honing their estimation skills."</li></ul>
<p>Move People Around</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Change dev assignments weekly, daily, or hourly</li>
<li>Prevents serious knowledge loss and bottlenecks; spreads overall knowledge around</li>
<li>May be as simple as encouraging everyone to try working on a different section of the system at least part of each iteration</li>
<li>Pair programming eliminates transition time &#8211; move one pair at a time</li>
<li>Harder if you don't pair program</li>
<li>Feedback goal is to spread understanding around the project</li>
<li>Can accomplish this with regular code reviews &#8211; less effective but better than nothing</li>
<li>Helps avoid the Truck Number anti-pattern (see <a href="http://c2.com/cgi/wiki?TruckNumberFixed">http://c2.com/cgi/wiki?TruckNumberFixed</a>)</li>
<li>Explain Truck Number to management. Explain that it's risk. Managers understand risk.<font size=2><?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p></o:p></font></li></ul>
