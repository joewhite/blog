---
title: "MSF for Agile Software Development  #Delphi  #borcon2005  #extreme programming"
sort: 2233
---
<p>MSF for Agile Software Development</p>
<p>Granville Miller (aka <a href="http://blogs.msdn.com/randymiller">Randy Miller</a>)</p>
<p><?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p>&nbsp;</o:p></p>



<p>MSF is an agile software process that reflects some of the practices used within Microsoft.</p>
<p><o:p>&nbsp;</o:p></p>
<p>Agenda</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Agile Software Development
<li>Team Model
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Team model is the most critical piece of the agile software development process. If you know it, you can answer 90% of the questions.</li></ul>
<li>Personas/Scenarios
<li>The "Agile" Pattern
<li>Shadow Applications
<li>Incremental Threat Modeling
<li>Context-Driven Testing
<li>Risk</li></ul>
<p>Randy usually gives people about a day's worth of presentation on this stuff, and we're trying to cover it in an hour, so this will be much abbreviated. There's much more info available on Microsoft's Web site (see link, below).</p>
<p><o:p>&nbsp;</o:p></p>
<p>Project Success is Rare</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>2004: 15% failed, 51% challenged, 34% succeeded
<li>2000: 23% failed, 49% challenged, 28% succeeded
<li>1995: 40% failed, 33% challenged, 27% succeeded
<li>1994: 31% failed, 53% challenged, 16% succeeded
<li>The good news: State is Improving
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Small Releases
<li>Increased Customer Involvement
<li>You'd think success would depend on some new server technology or something, but customer involvement seems more important</li></ul>
<li>Agile Manifesto
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Working software over comprehensive documentation
<li>Customer collaboration over contract negotiation</li></ul>
<li>An agile method is
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Iterative
<li>Incremental
<li>Self-organizing and
<li>Emergent.
<li>It must include the attributes; otherwise it is a "lightened defined process".</li></ul></li></ul>
<p>Activities in MSF</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>There are more roles than just customer and developer. There are architects, testers, etc., who add value.
<ul style="MARGIN-TOP: 0in" type=circle>
<li>More roles -&gt; communication complexity increases.</li></ul>
<li>Composed of 14 basic work streams
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Basic activity building blocks of MSF
<li>A work stream is an activity that is composed of other activities
<li>Activities are described using the ETVX format (whatever that is)
<li>Contains 70 activities (not including work streams)
<li>Most work streams are performed by a single role</li></ul>
<li>Roles &lt;-&gt; Constituencies
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Team of Peers
<li>Business analyst: Product management
<ul style="MARGIN-TOP: 0in" type=square>
<li>is responsible for two constituency groups: one is the sponsor, the other is the users.
<li>is responsible for tracking time.</li></ul></li></ul>
<li>Release manager: in charge of understanding deployment, handing it off. Product manager: responsible for tracking budget and such. They can be combined.
<li>Roles
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Developer
<li>Project Manager
<li>Business Analyst (handles interaction with customer)
<li>Architect
<li>Tester
<li>Release Manager</li></ul>
<li>Work Streams / Goals
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Capture Product Vision (business analyst)
<li>Create a Scenario
<li>Create a Quality of Service Requirement
<li>Plan an Iteration (project manager)
<li>Create Solution Architecture (architect)
<li>Implement a Development Task (developer)
<li>Build a Product
<li>Test a Scenario
<li>Test a Quality of Service Requirement
<li>Fix a Bug
<li>Close a Bug (tester)
<li>Release a Product
<li>Guide Project (project manager)
<li>Guide Iteration (project manager)</li></ul></li></ul>
<p><?xml:namespace prefix = st1 ns = "urn:schemas-microsoft-com:office:smarttags" /><st1:place><st1:PlaceName>Safe</st1:PlaceName> <st1:PlaceType>Harbor</st1:PlaceType></st1:place> Statement</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Choose the MSF for Agile Software Development process for projects with results-oriented teams who can work without lots of intermediate documentation
<li>"Stretch to Fit" instead of "Shrink to Fit"
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Minimalist approach
<li>Agile methodologies promote adaptation</li></ul></li></ul>
<p>Scaling to All Project Sizes</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>There's a matrix for whether it's a good fit to combine particular roles
<ul style="MARGIN-TOP: 0in" type=circle>
<li>(P)ossible, (U)nlikely, (N)ot recommended</li></ul>
<li>"If you have the skills to play a role, you may play that role"
<li>Smallest project size is 3 people (with one or two people, you probably don't need much process)</li></ul>
<p>Mindsets:</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>More than a set of activities &#8211; a collection of values
<li>Quality is Defined by Customer
<li>Pride of Workmanship
<li>Team of Peers
<li>Frequent Delivery
<li>Willingness to Learn
<li>Get Specific Early
<li>Qualities of Service
<li>Citizenship
<li>Different roles. Some care only about time. Some don't care so much about time, and fight for quality. Who breaks deadlocks?</li></ul>
<p>Adaptation</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>There are many events that may befall a project that are not covered by our process
<li>Use best judgment and adapt based on mindsets and principles</li></ul>
<p>Personas</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Descriptions of a group of typical users
<li>Persona represents a "proxy" for the user group, and provides a means to talk and reason about the group through the characteristics of one fictional individual
<li>On-site customer is the best you could hope for.
<li>Actors in use cases: the other extreme. A developer is a developer.
<li>Persona: fictional representations of people.
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Be respectful.
<ul style="MARGIN-TOP: 0in" type=square>
<li>Best Buy did a set of personae for their customers. One was the "Devil Customer". This was fine until it landed in the Wall Street Journal.</li></ul>
<li>Can represent the novice and the advanced developer.
<li>Scenarios associated with each persona.
<li>Knowledge, skill, usage pattern</li></ul>
<li>Can still meet actual customers (and refine our personae).
<li>Different people come up with different personae, write them on sticky notes, put them on the board. When you take yours up, you decide whether it should be combined with one of the others, or should be separate.
<li>Q: Where do you get pictures to use for your personae? A: Got any artists in your group? Can you buy a CD of stock photography?
<li>Baseball cards of personae (including organizations)
<li>When you're trying to make a decision, at least you have a clue.</li></ul>
<p>Jack</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Role: Online shopper
<li>Motivation: Get it quick
<li>Usage pattern: Hates shopping but wants to get it quick. &#8230;</li></ul>
<p>Incremental approach &#8211; Why scenarios over use cases?</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Risk reduction
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Changes
<li>Delivery
<li>Progress</li></ul>
<li>Activities need to be able to handle small increments up to a single change
<li>A scenario is basically a single path through a use case. Easy to break into smaller increments if needed.</li></ul>
<p>The Agile Pattern</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Scenario list (aka backlog) -&gt; iteration plan
<li>Peel off pieces, add them to a particular iteration
<li>The things in the list aren't actually scenarios &#8211; they're reminders. The business analyst writes them up for the iteration.</li></ul>
<p>Date or Feature Driven</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Which?
<li>Parkinson's Law: If you give developers more time, they will find ways to fill that time. So you have to be aggressive on the date, right?
<li>But not everything is really date-driven
<li>"We're going to deliver in March, even if it's March 51st"</li></ul>
<p>Minimum Acceptance Level</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>If you ask customers what they want, they'll list off the Exciters &amp; Delighters. (What do you want in your TV? Remote control, stereo, closed captioning, etc.)
<li>But they usually won't tell you about the Dissatisfiers (must-have requirements) (ability to turn the TV on without the remote, good picture quality, etc.)
<li>First few iterations: you work mostly on the dissatisfiers, and a little on the exciters. But you can't deliver until you make enough progress on the dissatisfiers.
<li>So even if time ran out on iteration 3, you still couldn't ship.
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Of course, this is all pragmatic. Depends on market. If you really want to be first-to-market, you might ship anyway.</li></ul>
<li>Even if you're date-driven, you might not really be date-driven, because you might not be able to ship without X features.</li></ul>
<p>Feature graphs:</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Active (until the developer finishes it &#8211; doesn't distinguish ones that haven't yet been given to the developers to work on)
<li>Resolved (goes to test: implemented fully)
<li>Closed (tester can run it totally through)
<li>Do a stacked area graph over time. Active=red, resolved=yellow, closed=green.
<li>If you've still got too much red as of the ship date, the project manager and the business analyst have a problem, and need to start talking to each other.
<li>If the yellow keeps growing over time, it could mean you don't have enough testers, or that scheduling is poor (finishing too many items at once), or the test cases are failing (coders are submitting bad code and marking it as resolved, and the testers have to kick it back), or management is putting too much pressure on and the team stops caring about actual quality and becomes totally dysfunctional.</li></ul>
<p><st1:place><st1:PlaceName>Context-Driven</st1:PlaceName> <st1:PlaceType>School</st1:PlaceType></st1:place></p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Value of any practice depends on its context
<li>If you absolutely *must* ship by a certain date or the company runs out of money, you might be incented to ship something that's not ready. Is that the right thing to do? It depends on how the market reacts.
<li>There are good practices in context, but there are no best practices
<li>People, working together, are the most important part of any project's context.</li></ul>
<p>Context Driven Approach</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Testing that is acceptable on opne project may be criminal on another
<li>Define shipping criteria based on what's important to us
<li>Release criteria
<ul style="MARGIN-TOP: 0in" type=circle>
<li>No Severity 1s and 2s in the shipping product</li></ul>
<li>Testing thresholds
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Code Coverage for Unit Test
<li>Getting 60% code coverage is really normal
<li>To get 80%, you start using things like mock objects, and it gets harder
<li>To get 95%-100%, you start building scaffolding and bizarre stuff
<li>What's right? Answer: it depends entirely on the project.</li></ul>
<li>Focusing on statement and branch coverage is not sufficient.
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Missing code
<li>Incorrect handling of boundary conditions
<li>Timing problems
<li>Memory leaks</li></ul></li></ul>
<p>Bug debt</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>If the developer has more than 30 bugs, it's time to schedule a bugfix iteration, where you fix bugs (and fix bugs only)
<li>Worth doing even though you take a hit on velocity, because you'll take a hit on velocity anyway (because you either fix them as you go, or they slow down your coding or testing)</li></ul>
<p>Conduct Exploratory Testing (One Heuristic)</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Assume a persona
<li>Time-box
<li>Traverse the system looking for new goals, roadblocks, or improvements, keeping the needs of the persona in mind
<li>Add any new bugs, scenarios, or quality of service requirements discovered using this process</li></ul>
<p>Risk and Agile Processes</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Agile processes drive out risk through short release cycles and customer feedback.
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Requirements risk
<li>Implementation risk
<li>Quality risk</li></ul></li></ul>
<p>Governance</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Objectives Reviewed
<li>Progress Assessed
<li>Test Thresholds Evaluated
<li>Risks Identified and Mitigated
<li>Deployment Ready</li></ul>
<p>Methods of Adoption</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Organization / Team
<li>Grassroots &#8211; individuals find the practices useful and the process spreads by providing value
<li>MSF provides friction-free usage that doesn't get in the way</li></ul>
<p>More info</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li><a href="http://www.microsoft.com/msf">http://www.microsoft.com/msf</a> &#8211; download "MSF for Agile Software Development (Process Guidance Only)"; has much more info than this presentation
<li>Will be released in book form &#8211; MS wants to ship it with Team Foundation 1Q next year</li></ul>
