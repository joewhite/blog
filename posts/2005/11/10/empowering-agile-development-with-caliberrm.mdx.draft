---
title: "Empowering Agile Development with CaliberRM  #.NET  #Delphi  #borcon2005  #extreme programming"
sort: 2234
---
<p>Empowering Agile Development with CaliberRM</p>
<p>Jerry Odenwelder</p>
<p><?xml:namespace prefix = o ns = "urn:schemas-microsoft-com:office:office" /><o:p>&nbsp;</o:p></p>
<p>Test-first speaking :-) (they had to troubleshoot and test the recording software before the session started)</p>
<p><o:p>&nbsp;</o:p></p>
<p>Likes agile &#8211; customer involvement, lots of testing</p>
<p><o:p>&nbsp;</o:p></p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Individuals and Interaction: People are not pluggable units</li>
<li>Customer Collaboration: Customers are ultimate beneficiaries, so need to be involved</li>
<li>Working Software: is what adds value to the business</li>
<li>Adaptive: Change the process as needed.</li></ul>
<p>Agile Requirements</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>User Stories</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Can break down into one or many requirements</li></ul>
<li>Describes a unit of work that contributes to business value</li>
<li>Created by, and owned by, the customer</li>
<li>Meets the PET criteria</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Can be Prioritized</li>
<li>Can be Estimated</li>
<li>Can be and Tested</li></ul></ul>
<p>Why Use a Tool (instead of index cards)</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Automation (cut/paste)</li>
<li>Disaster recovery</li>
<li>Reporting</li>
<li>Traceability</li>
<li>Distributed Development</li>
<li>Scalability</li>
<li>Customer is not available</li></ul>
<p>CaliberRM Supporting Agile</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Light Weight</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Expert Client</li>
<li>Cross-Platform / Web Client</li></ul>
<li>Works in your environment (<?xml:namespace prefix = st1 ns = "urn:schemas-microsoft-com:office:smarttags" /><st1:place>Delphi</st1:place>, etc.)</li>
<li>Get the bureaucracy off your back</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Document generation</li>
<li>Reporting</li></ul>
<li>Everyone is on the same page</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Central server</li></ul></ul>
<p>Managing User Stories</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Rich text editor</li>
<li>Attach pictures</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Take a picture of the napkin and put it in as a requirement</li>
<li>No zooming support in the current version</li></ul>
<li>Embedded tables (e.g., Fitness)</li>
<li>Glossaries: business can write terms they're familiar with, they'll automatically be highlighted in the text, and when the programmer hovers over them, they find out what the acronym means</li>
<li>Could create a requirement type of "Backlog" and another called "Sprint Backlog"</li>
<li>User-defined attributes, e.g., complexity, iteration, requires spike</li></ul>
<p>Collaboration</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>E-mail notifications (customize per group); registered interest</li>
<li>Threaded discussions</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Record hallway discussions</li>
<li>If the customer isn't immediately available, could post questions and get responses back</li>
<li>When you log into Caliber, you get a pop-up notification (can disable, can run explicitly later) showing which discussion items you haven't read yet</li></ul></ul>
<p>Decrease time of meetings</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Filtering: Remove data from grid that's not important for this meeting; sort</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Can save the grid settings and reload them later</li></ul>
<li>Edit right there during the meeting</li></ul>
<p>Maintains history of changes</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Records how requirements change over time</li>
<li>Go back and review old version of requirements</li>
<li>Document Factory can produce documentation (which even includes the picture of the napkin)</li>
<li>History tab: top pane shows history of changes, bottom pane shows what changed in any particular rev</li>
<li>No way to require (at the server side) comments for each change</li></ul>
<p>Manage Dependencies</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Valuable for</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Impact of change</li>
<li>Risk assessment</li>
<li>Planning</li></ul>
<li>Important Agile Traces</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>Dependent requirements</li>
<li>Project tasks</li>
<li>Model components</li>
<li>Validation procedures</li></ul>
<li>Tracing to</li>
<ul style="MARGIN-TOP: 0in" type=circle>
<li>External files (might be a bad idea in Agile, since the files might change frequently)</li>
<ul style="MARGIN-TOP: 0in" type=square>
<li>External revision control system?</li></ul>
<li>TestDirector</li>
<li>StarTeam</li></ul>
<li>View trace matrix</li>
<li>When you change one item, the items it feeds into are marked as suspect, so you can go and review them</li></ul>
<p>Baselines</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Isolate requirements for a release or iteration</li>
<li>Once a requirement has been put into a baseline, it can't be modified through normal editing (you have to explicitly go into Baseline Maintenance)</li>
<li>Baselines support digital signatures (if you have compliance issues)</li>
<li>Once a baseline is locked (signed), it can't be unlocked (for compliance reasons)</li>
<li>Can diff two baselines, or current baseline with old baseline</li></ul>
<p>Security</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Supported to User-Defined Attribute level</li>
<li>Q: If you're in an agile environment, do you need security? A: It might not be a bad idea to keep the customer from editing the estimates (grin). Maybe the developer shouldn't be able to edit descriptions or iteration numbers. And if you're working with a third-party vendor, you'd want to rein that in as well. The person who drives the meetings should probably have all access.</li></ul>
<p>Conclusion</p>
<ul style="MARGIN-TOP: 0in" type=disc>
<li>Change is inevitable; embrace it</li>
<li>Requirement Capture and Understanding</li>
<li>Planning and Risk Analysis</li>
<li>Tracking Progress</li>
<li>Post Mortems</li></ul>
<p>Q: What happens if you have an unreliable network connection that dies while you're working? A: Anything they were working on, but hadn't saved yet, will be lost. The requirement they were editing will be locked until the session times out (or the admin logs off their session).</p>
<p><o:p>&nbsp;</o:p></p>
<p>Q: How do you make sure the story gets QA'ed and documented? A: You would probably want to use user-defined attributes for that (possibly in combination with the built-in Status and Priority attributes). Find them by setting filters on the requirements grid.</p>
